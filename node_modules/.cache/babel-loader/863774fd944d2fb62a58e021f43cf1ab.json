{"ast":null,"code":"\"use strict\";\n\nimport _regeneratorRuntime from \"/Users/joycejiang/workspace/outliers-nft-web/web_react/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"/Users/joycejiang/workspace/outliers-nft-web/web_react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/joycejiang/workspace/outliers-nft-web/web_react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/joycejiang/workspace/outliers-nft-web/web_react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/joycejiang/workspace/outliers-nft-web/web_react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { isHexString } from \"@ethersproject/bytes\";\nimport { Description, defineReadOnly, resolveProperties } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\n;\n; //export type CallTransactionable = {\n//    call(transaction: TransactionRequest): Promise<TransactionResponse>;\n//};\n\nexport var ForkEvent = /*#__PURE__*/function (_Description) {\n  _inherits(ForkEvent, _Description);\n\n  var _super = _createSuper(ForkEvent);\n\n  function ForkEvent() {\n    _classCallCheck(this, ForkEvent);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ForkEvent, null, [{\n    key: \"isForkEvent\",\n    value: function isForkEvent(value) {\n      return !!(value && value._isForkEvent);\n    }\n  }]);\n\n  return ForkEvent;\n}(Description);\nexport var BlockForkEvent = /*#__PURE__*/function (_ForkEvent) {\n  _inherits(BlockForkEvent, _ForkEvent);\n\n  var _super2 = _createSuper(BlockForkEvent);\n\n  function BlockForkEvent(blockHash, expiry) {\n    _classCallCheck(this, BlockForkEvent);\n\n    if (!isHexString(blockHash, 32)) {\n      logger.throwArgumentError(\"invalid blockHash\", \"blockHash\", blockHash);\n    }\n\n    return _super2.call(this, {\n      _isForkEvent: true,\n      _isBlockForkEvent: true,\n      expiry: expiry || 0,\n      blockHash: blockHash\n    });\n  }\n\n  return _createClass(BlockForkEvent);\n}(ForkEvent);\nexport var TransactionForkEvent = /*#__PURE__*/function (_ForkEvent2) {\n  _inherits(TransactionForkEvent, _ForkEvent2);\n\n  var _super3 = _createSuper(TransactionForkEvent);\n\n  function TransactionForkEvent(hash, expiry) {\n    _classCallCheck(this, TransactionForkEvent);\n\n    if (!isHexString(hash, 32)) {\n      logger.throwArgumentError(\"invalid transaction hash\", \"hash\", hash);\n    }\n\n    return _super3.call(this, {\n      _isForkEvent: true,\n      _isTransactionForkEvent: true,\n      expiry: expiry || 0,\n      hash: hash\n    });\n  }\n\n  return _createClass(TransactionForkEvent);\n}(ForkEvent);\nexport var TransactionOrderForkEvent = /*#__PURE__*/function (_ForkEvent3) {\n  _inherits(TransactionOrderForkEvent, _ForkEvent3);\n\n  var _super4 = _createSuper(TransactionOrderForkEvent);\n\n  function TransactionOrderForkEvent(beforeHash, afterHash, expiry) {\n    _classCallCheck(this, TransactionOrderForkEvent);\n\n    if (!isHexString(beforeHash, 32)) {\n      logger.throwArgumentError(\"invalid transaction hash\", \"beforeHash\", beforeHash);\n    }\n\n    if (!isHexString(afterHash, 32)) {\n      logger.throwArgumentError(\"invalid transaction hash\", \"afterHash\", afterHash);\n    }\n\n    return _super4.call(this, {\n      _isForkEvent: true,\n      _isTransactionOrderForkEvent: true,\n      expiry: expiry || 0,\n      beforeHash: beforeHash,\n      afterHash: afterHash\n    });\n  }\n\n  return _createClass(TransactionOrderForkEvent);\n}(ForkEvent); ///////////////////////////////\n// Exported Abstracts\n\nexport var Provider = /*#__PURE__*/function () {\n  function Provider() {\n    _classCallCheck(this, Provider);\n\n    logger.checkAbstract(this instanceof Provider ? this.constructor : void 0, Provider);\n    defineReadOnly(this, \"_isProvider\", true);\n  }\n\n  _createClass(Provider, [{\n    key: \"getFeeData\",\n    value: function getFeeData() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _yield$resolvePropert, block, gasPrice, maxFeePerGas, maxPriorityFeePerGas;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return resolveProperties({\n                  block: this.getBlock(\"latest\"),\n                  gasPrice: this.getGasPrice().catch(function (error) {\n                    // @TODO: Why is this now failing on Calaveras?\n                    //console.log(error);\n                    return null;\n                  })\n                });\n\n              case 2:\n                _yield$resolvePropert = _context.sent;\n                block = _yield$resolvePropert.block;\n                gasPrice = _yield$resolvePropert.gasPrice;\n                maxFeePerGas = null, maxPriorityFeePerGas = null;\n\n                if (block && block.baseFeePerGas) {\n                  // We may want to compute this more accurately in the future,\n                  // using the formula \"check if the base fee is correct\".\n                  // See: https://eips.ethereum.org/EIPS/eip-1559\n                  maxPriorityFeePerGas = BigNumber.from(\"1500000000\");\n                  maxFeePerGas = block.baseFeePerGas.mul(2).add(maxPriorityFeePerGas);\n                }\n\n                return _context.abrupt(\"return\", {\n                  maxFeePerGas: maxFeePerGas,\n                  maxPriorityFeePerGas: maxPriorityFeePerGas,\n                  gasPrice: gasPrice\n                });\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    } // Alias for \"on\"\n\n  }, {\n    key: \"addListener\",\n    value: function addListener(eventName, listener) {\n      return this.on(eventName, listener);\n    } // Alias for \"off\"\n\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(eventName, listener) {\n      return this.off(eventName, listener);\n    }\n  }], [{\n    key: \"isProvider\",\n    value: function isProvider(value) {\n      return !!(value && value._isProvider);\n    }\n  }]);\n\n  return Provider;\n}();","map":{"version":3,"mappings":"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","names":["BigNumber","isHexString","Description","defineReadOnly","resolveProperties","Logger","version","logger","ForkEvent","value","_isForkEvent","BlockForkEvent","blockHash","expiry","throwArgumentError","_isBlockForkEvent","TransactionForkEvent","hash","_isTransactionForkEvent","TransactionOrderForkEvent","beforeHash","afterHash","_isTransactionOrderForkEvent","Provider","checkAbstract","block","getBlock","gasPrice","getGasPrice","catch","error","maxFeePerGas","maxPriorityFeePerGas","baseFeePerGas","from","mul","add","eventName","listener","on","off","_isProvider"],"sourceRoot":"","sources":["../src.ts/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}