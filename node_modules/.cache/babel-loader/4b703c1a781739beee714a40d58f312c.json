{"ast":null,"code":"import _regeneratorRuntime from\"/Users/joycejiang/workspace/outliers-nft-web/web_react/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/joycejiang/workspace/outliers-nft-web/web_react/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/joycejiang/workspace/outliers-nft-web/web_react/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import'./styles/App.css';import twitterLogo from\"./assets/twitter-logo.svg\";import gallery from'./assets/gallery.gif';import React,{useEffect,useState}from\"react\";import{ethers}from\"ethers\";import outliersNFT from'./utils/OutliersNFT.json';import outliersLogo from'./assets/LOGO.png';import'./styles/fonts/TupacMagrath.woff';// Constants\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var TWITTER_HANDLE='joycebydsgn';var TWITTER_LINK=\"https://twitter.com/\".concat(TWITTER_HANDLE);var OPENSEA_LINK='';var TOTAL_MINT_COUNT=50;var App=function App(){/* state variable we use to store our user's public wallet after importing useState*/var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),currentAccount=_useState2[0],setCurrentAccount=_useState2[1];/*making sure this is async*/var checkIfWalletIsConnected=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var _window,ethereum,accounts,account;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:/*making sure we have access to window.ethereum */_window=window,ethereum=_window.ethereum;if(ethereum){_context.next=6;break;}console.log(\"Make sure you have metamask!!\");return _context.abrupt(\"return\");case 6:console.log(\"We have the ethereum object\",ethereum);case 7:_context.next=9;return ethereum.request({method:'eth_accounts'});case 9:accounts=_context.sent;/*\n      * User can have multiple authorized accounts, we grab the first one if its there!\n      */if(accounts.length!==0){account=accounts[0];console.log(\"Found an authorized account:\",account);setCurrentAccount(account);}else{console.log(\"No authorized account found\");}case 11:case\"end\":return _context.stop();}}},_callee);}));return function checkIfWalletIsConnected(){return _ref.apply(this,arguments);};}();/*implementing connectWallet method */var connectWallet=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(){var _window2,ethereum,accounts;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_window2=window,ethereum=_window2.ethereum;if(ethereum){_context2.next=7;break;}alert(\"get MetaMask pls:)\");return _context2.abrupt(\"return\");case 7:alert(\"found MetaMask wallet. connecting ..\");case 8:_context2.next=10;return ethereum.request({method:\"eth_requestAccounts\"});case 10:accounts=_context2.sent;/*prints out public address once we authorize metamask */console.log(\"Connected\",accounts[0]);setCurrentAccount(accounts[0]);_context2.next=18;break;case 15:_context2.prev=15;_context2.t0=_context2[\"catch\"](0);console.log(_context2.t0);case 18:case\"end\":return _context2.stop();}}},_callee2,null,[[0,15]]);}));return function connectWallet(){return _ref2.apply(this,arguments);};}();//call makeanEpicNFT function from our web app\nvar askContractToMintNft=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(){var CONTRACT_ADDRESS,_window3,ethereum,provider,signer,connectedContract,nftTxn;return _regeneratorRuntime().wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:CONTRACT_ADDRESS=\"0xBb514353b0665BC096399c2D9133c8bEdC6a7d7a\";_context3.prev=1;_window3=window,ethereum=_window3.ethereum;if(!ethereum){_context3.next=18;break;}provider=new ethers.providers.Web3Provider(ethereum);// ethers is a lbirary that helps our frontend talk to our contract\n//A \"Provider\" is what we use to actually talk to Ethereum nodes. \nsigner=provider.getSigner();connectedContract=new ethers.Contract(CONTRACT_ADDRESS,outliersNFT.abi,signer);// this line creates the connection to our contract\n//contract's address -> abi file\nconsole.log(\"Going to pop wallet now to pay gas...\");_context3.next=10;return connectedContract.mint();case 10:nftTxn=_context3.sent;console.log(\"Mining... please wait.\");_context3.next=14;return nftTxn.wait();case 14:console.log(\"Mined, see transaction: https://rinkeby.etherscan.io/tx/\".concat(nftTxn.hash));seeTransaction();_context3.next=19;break;case 18:console.log(\"Ethereum object doesn't exist!\");case 19:_context3.next=24;break;case 21:_context3.prev=21;_context3.t0=_context3[\"catch\"](1);console.log(_context3.t0);case 24:case\"end\":return _context3.stop();}}},_callee3,null,[[1,21]]);}));return function askContractToMintNft(){return _ref3.apply(this,arguments);};}();/*runsfunction when the page loads */useEffect(function(){checkIfWalletIsConnected();},[]);// Render Methods\nvar renderNotConnectedContainer=function renderNotConnectedContainer(){return/*#__PURE__*/_jsx(\"button\",{onClick:connectWallet,className:\"cta-button connect-wallet-button\",children:\"connect wallet\"});};// mint button\nvar connectedMint=function connectedMint(){return/*#__PURE__*/_jsx(\"button\",{onClick:askContractToMintNft,className:\"cta-button mint-button\",children:\"mint nft\"});};var seeTransaction=function seeTransaction(){return/*#__PURE__*/_jsx(\"p\",{className:\"sub-text\",children:\"mined!\"});};return/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"glass-container\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"column1\",children:/*#__PURE__*/_jsx(\"img\",{alt:\"NFT Preview\",className:\"card\",src:gallery})}),/*#__PURE__*/_jsxs(\"span\",{className:\"column2\",children:[/*#__PURE__*/_jsxs(\"p\",{className:\"header\",children:[\"ThunderLizard \",/*#__PURE__*/_jsx(\"p\",{style:{fontSize:'3.5vw',lineHeight:'0vh'},children:\"NFT Collection\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"sub-text\",children:\"We connect, educate, and empower the top Web3 builders in the world.\"}),renderNotConnectedContainer(),connectedMint()]})]}),/*#__PURE__*/_jsx(\"a\",{className:\"outliers-logo\",href:\"http://outliers.build\",target:\"_blank\",rel:\"noreferrer\",children:/*#__PURE__*/_jsx(\"img\",{alt:\"Outliers Logo\",className:\"outliers-logo\",src:outliersLogo})}),/*#__PURE__*/_jsx(\"i\",{children:\"building the future of web3 and deFi\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"footer-container\",children:[/*#__PURE__*/_jsx(\"img\",{alt:\"Twitter Logo\",className:\"twitter-logo\",src:twitterLogo}),/*#__PURE__*/_jsx(\"a\",{className:\"footer-text\",href:TWITTER_LINK,target:\"_blank\",rel:\"noreferrer\",children:\"built by @\".concat(TWITTER_HANDLE)})]})]})});};export default App;","map":{"version":3,"names":["gallery","React","useEffect","useState","ethers","outliersNFT","outliersLogo","TWITTER_HANDLE","TWITTER_LINK","OPENSEA_LINK","TOTAL_MINT_COUNT","App","currentAccount","setCurrentAccount","checkIfWalletIsConnected","window","ethereum","console","log","request","method","accounts","length","account","connectWallet","alert","askContractToMintNft","CONTRACT_ADDRESS","provider","providers","Web3Provider","signer","getSigner","connectedContract","Contract","abi","mint","nftTxn","wait","hash","seeTransaction","renderNotConnectedContainer","connectedMint","fontSize","lineHeight","twitterLogo"],"sources":["/Users/joycejiang/workspace/outliers-nft-web/web_react/src/App.js"],"sourcesContent":["import './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport gallery from './assets/gallery.gif';\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport outliersNFT from './utils/OutliersNFT.json';\nimport outliersLogo from './assets/LOGO.png';\nimport './styles/fonts/TupacMagrath.woff';\n\n// Constants\nconst TWITTER_HANDLE = 'joycebydsgn';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = '';\nconst TOTAL_MINT_COUNT = 50;\n\nconst App = () => {\n  /* state variable we use to store our user's public wallet after importing useState*/\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  /*making sure this is async*/\n\n  const checkIfWalletIsConnected = async () => {\n    /*making sure we have access to window.ethereum */\n    const {ethereum}=window;\n  \n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!!\");\n      return;\n    } else{\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n      /*\n      * Check if we're authorized to access the user's wallet\n      */\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n    /*\n      * User can have multiple authorized accounts, we grab the first one if its there!\n      */\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n      } else {\n        console.log(\"No authorized account found\");\n      }\n    }\n  \n\n  /*implementing connectWallet method */\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if(!ethereum){\n        alert(\"get MetaMask pls:)\");\n        return;\n      }else{\n        alert(\"found MetaMask wallet. connecting ..\");\n      }\n\n      /*method to request access to account */\n      const accounts = await ethereum.request({method:\"eth_requestAccounts\"});\n\n      /*prints out public address once we authorize metamask */\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error){\n        console.log(error);\n    }\n  }\n\n  //call makeanEpicNFT function from our web app\n  const askContractToMintNft = async () => {\n    const CONTRACT_ADDRESS = \"0xBb514353b0665BC096399c2D9133c8bEdC6a7d7a\";\n  \n    try {\n      const { ethereum } = window;\n  \n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        // ethers is a lbirary that helps our frontend talk to our contract\n        //A \"Provider\" is what we use to actually talk to Ethereum nodes. \n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, outliersNFT.abi, signer);\n        // this line creates the connection to our contract\n        //contract's address -> abi file\n        \n        console.log(\"Going to pop wallet now to pay gas...\")\n        let nftTxn = await connectedContract.mint();\n  \n        console.log(\"Mining... please wait.\")\n        await nftTxn.wait();\n        \n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n\n        {seeTransaction()}\n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  /*runsfunction when the page loads */\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n\n    // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      connect wallet\n    </button>\n  );\n\n    // mint button\n  const connectedMint = () => (\n    <button onClick={askContractToMintNft} className=\"cta-button mint-button\">\n      mint nft\n    </button>\n  );\n\n  const seeTransaction = () =>(\n    <p className =\"sub-text\">\n      mined! \n    </p>\n  )\n\n  return (\n    \n    <div className=\"App\">\n      <div className=\"container\">\n\n        <div className=\"glass-container\">\n\n          <span className=\"column1\">\n            \n            <img alt=\"NFT Preview\" className=\"card\" src={gallery} \n        /></span>\n\n          <span className=\"column2\">\n            \n            <p className=\"header\">ThunderLizard <p style={{fontSize:'3.5vw', lineHeight:'0vh'}}>NFT Collection</p></p>\n              \n\n              \n              <div className=\"sub-text\">\n                We connect, educate, and empower the top Web3 builders in the world.\n              </div>\n              \n              {renderNotConnectedContainer()}\n\n              {connectedMint()}\n\n          \n          </span>\n\n          \n\n        </div>\n\n        <a\n          className=\"outliers-logo\"\n          href=\"http://outliers.build\"\n          target=\"_blank\"\n          rel=\"noreferrer\" \n          >\n            <img alt=\"Outliers Logo\" className=\"outliers-logo\" src={outliersLogo} />\n          </a>\n\n          <i>building the future of web3 and deFi</i>\n\n        <div className=\"footer-container\">\n        \n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n         >{`built by @${TWITTER_HANDLE}`}</a></div>\n\n         \n        </div>\n\n\n        \n      </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}