{"ast":null,"code":"var _jsxFileName = \"/Users/joycejiang/workspace/epic-nfts/buildspace-nft-course-starter/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './styles/App.css';\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport gallery from './assets/gallery.gif';\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport myEpicNft from './utils/MyEpicNFT.json';\nimport tupac from './assets/Tupac.otf';\nimport outliersLogo from './assets/LOGO.png';\nimport header from './aassets/header.png'; // Constants\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = 'dsgnbyjoyce';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = '';\nconst TOTAL_MINT_COUNT = 50;\n\nconst App = () => {\n  _s();\n\n  /* state variable we use to store our user's public wallet after importing useState*/\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  /*making sure this is async*/\n\n  const checkIfWalletIsConnected = async () => {\n    /*making sure we have access to window.ethereum */\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n    /*\n    * Check if we're authorized to access the user's wallet\n    */\n\n\n    const accounts = await ethereum.request({\n      method: 'eth_accounts'\n    });\n    /*\n      * User can have multiple authorized accounts, we grab the first one if its there!\n      */\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n  /*implementing connectWallet method */\n\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"get MetaMask pls:)\");\n        return;\n      } else {\n        alert(\"you're connected! go ahead and mint\");\n      }\n      /*method to request access to account */\n\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      /*prints out public address once we authorize metamask */\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  }; //call makeanEpicNFT function from our web app\n\n\n  const askContractToMintNft = async () => {\n    const CONTRACT_ADDRESS = \"0xBb514353b0665BC096399c2D9133c8bEdC6a7d7a\";\n\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum); // ethers is a lbirary that helps our frontend talk to our contract\n        //A \"Provider\" is what we use to actually talk to Ethereum nodes. \n\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer); // this line creates the connection to our contract\n        //contract's addiress -> abi file\n\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n        console.log(\"Mining... please wait.\");\n        await nftTxn.wait();\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }; //fonts\n\n\n  const h1Styles = {\n    fontFamily: \"Tupac\",\n    fontSize: '10px'\n  };\n  /*runsfunction when the page loads */\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []); // Render Methods\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: connectWallet,\n    className: \"cta-button connect-wallet-button\",\n    children: \"connect wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this); // mint button\n\n\n  const connectedMint = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: askContractToMintNft,\n    className: \"cta-button mint-button\",\n    children: \"mint nft\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"glass-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"column1\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            alt: \"NFT Preview\",\n            className: \"card\",\n            src: gallery\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"column2\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            style: h1Styles,\n            className: \"header gradient-text\",\n            children: \"Thunder Lizard NFT Collection\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"sub-text\",\n            children: \"We connect, educate, and empower the top Web3 builders in the world.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 15\n          }, this), renderNotConnectedContainer(), connectedMint()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            alt: \"Outliers Logo\",\n            className: \"outliers-logo\",\n            src: outliersLogo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 14\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            alt: \"Twitter Logo\",\n            className: \"twitter-logo\",\n            src: twitterLogo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 16\n          }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n            className: \"footer-text\",\n            href: TWITTER_LINK,\n            target: \"_blank\",\n            rel: \"noreferrer\",\n            children: `built by @${TWITTER_HANDLE}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"Oez+vfH4X005OLgBo/Rzy9wdCKo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["gallery","React","useEffect","useState","ethers","myEpicNft","tupac","outliersLogo","header","TWITTER_HANDLE","TWITTER_LINK","OPENSEA_LINK","TOTAL_MINT_COUNT","App","currentAccount","setCurrentAccount","checkIfWalletIsConnected","ethereum","window","console","log","accounts","request","method","length","account","connectWallet","alert","error","askContractToMintNft","CONTRACT_ADDRESS","provider","providers","Web3Provider","signer","getSigner","connectedContract","Contract","abi","nftTxn","makeAnEpicNFT","wait","hash","h1Styles","fontFamily","fontSize","renderNotConnectedContainer","connectedMint","twitterLogo"],"sources":["/Users/joycejiang/workspace/epic-nfts/buildspace-nft-course-starter/src/App.js"],"sourcesContent":["import './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport gallery from './assets/gallery.gif';\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport myEpicNft from './utils/MyEpicNFT.json';\nimport tupac from './assets/Tupac.otf';\nimport outliersLogo from './assets/LOGO.png';\nimport header from './aassets/header.png';\n\n// Constants\nconst TWITTER_HANDLE = 'dsgnbyjoyce';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = '';\nconst TOTAL_MINT_COUNT = 50;\n\nconst App = () => {\n  /* state variable we use to store our user's public wallet after importing useState*/\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  /*making sure this is async*/\n\n  const checkIfWalletIsConnected = async () => {\n    /*making sure we have access to window.ethereum */\n    const {ethereum}=window;\n  \n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!!\");\n      return;\n    } else{\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n      /*\n      * Check if we're authorized to access the user's wallet\n      */\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n    /*\n      * User can have multiple authorized accounts, we grab the first one if its there!\n      */\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n      } else {\n        console.log(\"No authorized account found\");\n      }\n    }\n  \n\n  /*implementing connectWallet method */\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if(!ethereum){\n        alert(\"get MetaMask pls:)\");\n        return;\n      }else{\n        alert(\"you're connected! go ahead and mint\");\n      }\n\n      /*method to request access to account */\n      const accounts = await ethereum.request({method:\"eth_requestAccounts\"});\n\n      /*prints out public address once we authorize metamask */\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error){\n        console.log(error);\n    }\n  }\n\n  //call makeanEpicNFT function from our web app\n  const askContractToMintNft = async () => {\n    const CONTRACT_ADDRESS = \"0xBb514353b0665BC096399c2D9133c8bEdC6a7d7a\";\n  \n    try {\n      const { ethereum } = window;\n  \n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        // ethers is a lbirary that helps our frontend talk to our contract\n        //A \"Provider\" is what we use to actually talk to Ethereum nodes. \n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n        // this line creates the connection to our contract\n        //contract's addiress -> abi file\n\n        console.log(\"Going to pop wallet now to pay gas...\")\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n  \n        console.log(\"Mining... please wait.\")\n        await nftTxn.wait();\n        \n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n  \n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  //fonts\n  const h1Styles = {\n    fontFamily: \"Tupac\",\n    fontSize: '10px',\n  };\n\n  /*runsfunction when the page loads */\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n\n    // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      connect wallet\n    </button>\n  );\n\n    // mint button\n  const connectedMint = () => (\n    <button onClick={askContractToMintNft} className=\"cta-button mint-button\">\n      mint nft\n    </button>\n  );\n\n  return (\n    \n    <div className=\"App\">\n      <div className=\"container\">\n\n        <div className=\"glass-container\">\n\n          <span className=\"column1\"><img alt=\"NFT Preview\" className=\"card\" src={gallery} /></span>\n\n          <span className=\"column2\">\n\n            <p style={h1Styles} className=\"header gradient-text\">Thunder Lizard NFT Collection</p>\n              \n              <p className=\"sub-text\">\n                We connect, educate, and empower the top Web3 builders in the world.\n              </p>\n              \n              {renderNotConnectedContainer()}\n\n              {connectedMint()}\n\n          \n          </span>\n\n          \n\n        </div>\n\n        <div className=\"footer-container\">\n        <div><img alt=\"Outliers Logo\" className=\"outliers-logo\" src={outliersLogo} /></div>\n          <div><img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n         >{`built by @${TWITTER_HANDLE}`}</a></div>\n\n         \n        </div>\n\n\n        \n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}